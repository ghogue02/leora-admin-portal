// Local SQLite Schema for Testing Enrichment UI
// This is a simplified version focusing on Products for enrichment visualization

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client-local"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String    @id @default(uuid())
  slug      String    @unique
  name      String
  timezone  String    @default("America/New_York")
  products  Product[]
  skus      Sku[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id           String    @id @default(uuid())
  tenantId     String
  name         String
  brand        String?
  description  String?
  category     String?
  isSampleOnly Boolean   @default(false)
  tastingNotes String?   // JSON stored as string in SQLite
  foodPairings String?   // JSON stored as string in SQLite
  servingInfo  String?   // JSON stored as string in SQLite
  wineDetails  String?   // JSON stored as string in SQLite
  enrichedAt   DateTime?
  enrichedBy   String?   @default("claude-code")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  skus   Sku[]

  @@unique([tenantId, name])
}

model Sku {
  id             String   @id @default(uuid())
  tenantId       String
  productId      String
  code           String
  size           String?
  unitOfMeasure  String?
  abv            Float?
  casesPerPallet Int?
  pricePerUnit   Float?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tenant  Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([tenantId, code])
}
