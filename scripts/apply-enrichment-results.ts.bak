import { PrismaClient } from '@prisma/client';
import { config } from 'dotenv';
import { resolve } from 'path';
import { readFileSync } from 'fs';

// Load environment variables
config({ path: resolve(__dirname, '../.env.local') });

const prisma = new PrismaClient();

async function applyEnrichment(batchNumber: number) {
  const resultsFile = resolve(__dirname, `../data/wine-research-results-batch-${batchNumber}.json`);

  console.log(`\nüìä Applying Wine Enrichment Results`);
  console.log(`===================================\n`);
  console.log(`Reading: ${resultsFile}\n`);

  // Read results
  const results = JSON.parse(readFileSync(resultsFile, 'utf-8'));

  console.log(`Found ${results.length} enriched wines\n`);

  let successCount = 0;
  let errorCount = 0;

  for (const wine of results) {
    try {
      console.log(`Updating: ${wine.productName}`);

      // Find product by name
      const product = await prisma.product.findFirst({
        where: {
          name: wine.productName,
        },
      });

      if (!product) {
        console.log(`  ‚ö†Ô∏è  Product not found in database, skipping`);
        errorCount++;
        continue;
      }

      // Update product with enrichment data
      await prisma.product.update({
        where: { id: product.id },
        data: {
          description: wine.description,
          tastingNotes: wine.tastingNotes,
          foodPairings: wine.foodPairings,
          servingInfo: wine.servingInfo,
          wineDetails: wine.wineDetails,
          enrichedAt: new Date(wine.metadata.researchedAt),
          enrichedBy: `claude-code-accurate-v2 (${wine.metadata.source}, conf:${wine.metadata.confidence})`,
        },
      });

      console.log(`  ‚úÖ Updated successfully (${wine.metadata.confidence} confidence)`);
      successCount++;
    } catch (error) {
      console.error(`  ‚ùå Error updating: ${error}`);
      errorCount++;
    }
  }

  console.log(`\n\n‚úÖ ENRICHMENT APPLIED`);
  console.log(`===================`);
  console.log(`Success: ${successCount}`);
  console.log(`Errors: ${errorCount}`);
  console.log(`Total: ${results.length}\n`);

  await prisma.$disconnect();
}

const batchNumber = process.argv[2] ? parseInt(process.argv[2]) : 1;
applyEnrichment(batchNumber).catch(console.error);
