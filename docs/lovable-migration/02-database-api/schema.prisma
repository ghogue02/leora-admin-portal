/**
 * LOVABLE MIGRATION - Simplified Database Schema
 *
 * This is a minimal Prisma schema for Lovable migration
 * Original: /prisma/schema.prisma (1069 lines)
 *
 * SIMPLIFICATIONS:
 * - Removed complex multi-tenant features
 * - Kept core sales, product, and order models
 * - Simplified relationships
 * - Removed audit logs and compliance features
 */

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== CORE MODELS =====

model Tenant {
  id        String   @id @default(uuid())
  slug      String   @unique
  name      String
  timezone  String   @default("America/New_York")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users      User[]
  customers  Customer[]
  products   Product[]
  skus       Sku[]
  orders     Order[]
  invoices   Invoice[]
  carts      Cart[]
  cartItems  CartItem[]
  salesReps  SalesRep[]
  activities Activity[]
}

model User {
  id             String   @id @default(uuid())
  tenantId       String
  email          String
  fullName       String
  hashedPassword String
  isActive       Boolean  @default(true)
  lastLoginAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tenant         Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  salesRepProfile SalesRep?
  activities      Activity[]

  @@unique([tenantId, email])
  @@index([tenantId])
}

// ===== PRODUCT MODELS =====

model Product {
  id           String   @id @default(uuid())
  tenantId     String
  name         String
  brand        String?
  description  String?
  category     String?
  isSampleOnly Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  skus   Sku[]

  @@unique([tenantId, name])
  @@index([tenantId])
}

model Sku {
  id            String   @id @default(uuid())
  tenantId      String
  productId     String
  code          String
  size          String?
  unitOfMeasure String?
  abv           Float?
  pricePerUnit  Decimal? @db.Decimal(10, 2)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventories Inventory[]
  orderLines OrderLine[]
  cartItems  CartItem[]

  @@unique([tenantId, code])
  @@index([tenantId])
}

model Inventory {
  id        String   @id @default(uuid())
  tenantId  String
  skuId     String
  location  String
  onHand    Int      @default(0)
  allocated Int      @default(0)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sku    Sku    @relation(fields: [skuId], references: [id], onDelete: Cascade)

  @@unique([tenantId, skuId, location])
  @@index([tenantId])
}

// ===== CUSTOMER & SALES MODELS =====

enum CustomerRiskStatus {
  HEALTHY
  AT_RISK_CADENCE
  AT_RISK_REVENUE
  DORMANT
  CLOSED
}

model Customer {
  id                       String             @id @default(uuid())
  tenantId                 String
  externalId               String?
  name                     String
  accountNumber            String?
  billingEmail             String?
  phone                    String?
  street1                  String?
  city                     String?
  state                    String?
  postalCode               String?
  country                  String?            @default("US")
  lastOrderDate            DateTime?
  nextExpectedOrderDate    DateTime?
  averageOrderIntervalDays Int?
  riskStatus               CustomerRiskStatus @default(HEALTHY)
  salesRepId               String?
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt

  tenant     Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  salesRep   SalesRep?  @relation(fields: [salesRepId], references: [id], onDelete: SetNull)
  orders     Order[]
  invoices   Invoice[]
  activities Activity[]

  @@unique([tenantId, externalId])
  @@index([tenantId])
  @@index([salesRepId])
  @@index([riskStatus])
}

model SalesRep {
  id                    String   @id @default(uuid())
  tenantId              String
  userId                String   @unique
  territoryName         String
  deliveryDay           String?
  weeklyRevenueQuota    Decimal? @db.Decimal(12, 2)
  monthlyRevenueQuota   Decimal? @db.Decimal(12, 2)
  quarterlyRevenueQuota Decimal? @db.Decimal(12, 2)
  annualRevenueQuota    Decimal? @db.Decimal(12, 2)
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  customers Customer[]

  @@unique([tenantId, userId])
  @@index([tenantId])
  @@index([isActive])
}

// ===== ORDER MODELS =====

enum OrderStatus {
  DRAFT
  SUBMITTED
  FULFILLED
  CANCELLED
}

model Order {
  id           String      @id @default(uuid())
  tenantId     String
  customerId   String
  status       OrderStatus @default(DRAFT)
  orderedAt    DateTime?
  fulfilledAt  DateTime?
  deliveredAt  DateTime?
  total        Decimal?    @db.Decimal(12, 2)
  currency     String      @default("USD")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  lines      OrderLine[]
  invoices   Invoice[]
  activities Activity[]

  @@index([tenantId])
  @@index([deliveredAt])
}

model OrderLine {
  id        String   @id @default(uuid())
  tenantId  String
  orderId   String
  skuId     String
  quantity  Int
  unitPrice Decimal  @db.Decimal(10, 2)
  isSample  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  sku    Sku    @relation(fields: [skuId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

// ===== INVOICE MODELS =====

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  VOID
}

model Invoice {
  id            String        @id @default(uuid())
  tenantId      String
  orderId       String
  customerId    String?
  invoiceNumber String?
  status        InvoiceStatus @default(DRAFT)
  subtotal      Decimal?      @db.Decimal(12, 2)
  total         Decimal?      @db.Decimal(12, 2)
  dueDate       DateTime?
  issuedAt      DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  order    Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@index([tenantId])
}

// ===== CART MODELS =====

enum CartStatus {
  ACTIVE
  SUBMITTED
  ABANDONED
}

model Cart {
  id        String     @id @default(uuid())
  tenantId  String
  userId    String?
  status    CartStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  tenant Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items  CartItem[]

  @@index([tenantId])
}

model CartItem {
  id        String   @id @default(uuid())
  tenantId  String
  cartId    String
  skuId     String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  sku    Sku    @relation(fields: [skuId], references: [id], onDelete: Cascade)

  @@unique([tenantId, cartId, skuId])
  @@index([tenantId])
}

// ===== ACTIVITY TRACKING =====

enum ActivityOutcome {
  PENDING
  SUCCESS
  FAILED
  NO_RESPONSE
}

model Activity {
  id         String           @id @default(uuid())
  tenantId   String
  userId     String?
  customerId String?
  orderId    String?
  subject    String
  notes      String?
  occurredAt DateTime
  outcome    ActivityOutcome?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user     User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  order    Order?    @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@index([tenantId])
}
